datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator db {
    provider      = "go run github.com/steebchen/prisma-client-go"
    binaryTargets = ["darwin-arm64", "debian-openssl-3.0.x"]
}

model ExternalUser {
    id          String   @id @default(uuid())
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    name        String
    email       String
    is_verified Boolean  @default(false)
}

// enum NetworkUserType {
//     MINER
//     VALIDATOR
// }

enum TaskStatus {
    IN_PROGRESS
    COMPLETED
    EXPIRED
}

enum TaskResultStatus {
    IN_PROGRESS
    COMPLETED
    INVALID
}

enum TaskType {
    CODE_GENERATION
    DIALOGUE
    TEXT_TO_IMAGE
    TEXT_TO_THREE_D
}

model ApiKey {
    id            String    @id @default(uuid())
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt
    key           String    @unique
    is_delete     Boolean   @default(false)
    miner_user_id String
    MinerUser     MinerUser @relation(fields: [miner_user_id], references: [id])
}

model SubscriptionKey {
    id            String          @id @default(uuid())
    created_at    DateTime        @default(now())
    updated_at    DateTime        @updatedAt
    key           String          @unique
    is_delete     Boolean         @default(false)
    miner_user_id String
    MinerUser     MinerUser       @relation(fields: [miner_user_id], references: [id])
    WorkerPartner WorkerPartner[]
}

model MinerUser {
    id                String            @id @default(uuid())
    created_at        DateTime          @default(now())
    updated_at        DateTime          @updatedAt
    hotkey            String            @unique
    api_keys          ApiKey[]
    // api_key_expire_at DateTime
    // is_verified       Boolean         @default(false)
    tasks             Task[]
    subscription_keys SubscriptionKey[]
    email             String?
    organizationName  String?
}

model Task {
    id            String       @id @default(uuid())
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
    expire_at     DateTime
    title         String
    body          String
    type          TaskType
    task_data     Json
    status        TaskStatus
    max_results   Int
    num_results   Int
    total_reward  Float?
    task_results  TaskResult[]
    MinerUser     MinerUser?   @relation(fields: [miner_user_id], references: [id])
    miner_user_id String?
}

model TaskResult {
    id               String           @id @default(uuid())
    created_at       DateTime         @default(now())
    updated_at       DateTime         @updatedAt
    status           TaskResultStatus
    result_data      Json
    Task             Task             @relation(fields: [task_id], references: [id])
    task_id          String
    DojoWorker       DojoWorker       @relation(fields: [worker_id], references: [id])
    worker_id        String
    stake_amount     Float?
    potential_reward Float?
    potential_loss   Float?
    finalised_reward Float?
    finalised_loss   Float?
}

model DojoWorker {
    id                   String          @id @default(uuid())
    created_at           DateTime        @default(now())
    updated_at           DateTime        @updatedAt
    wallet_address       String
    chain_id             String
    task_results         TaskResult[]
    current_stake_amount Float?
    worker_partners      WorkerPartner[]

    @@unique([wallet_address, chain_id])
}

model WorkerPartner {
    id                     String          @id @default(uuid())
    created_at             DateTime        @default(now())
    updated_at             DateTime        @updatedAt
    SubscriptionKey        SubscriptionKey @relation(fields: [miner_subscription_key], references: [key])
    miner_subscription_key String
    DojoWorker             DojoWorker      @relation(fields: [worker_id], references: [id])
    worker_id              String
    is_delete_by_miner     Boolean         @default(false)
    is_delete_by_worker    Boolean         @default(false)
    name                   String?

    @@unique([miner_subscription_key, worker_id])
}

enum MetricsType {
    TOTAL_NUM_DOJO_WORKERS
    TOTAL_NUM_COMPLETED_TASKS
    TOTAL_NUM_TASK_RESULTS
    AVERAGE_TASK_COMPLETION_TIME
}

enum EventsType {
    TASK_COMPLETION_TIME
}

model Metrics {
    id           String      @id @default(uuid())
    created_at   DateTime    @default(now())
    updated_at   DateTime    @updatedAt
    type         MetricsType @unique
    metrics_data Json
}

model Events {
    id          String     @id @default(uuid())
    created_at  DateTime   @default(now())
    updated_at  DateTime   @updatedAt
    type        EventsType
    events_data Json
}
